{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\TEST-PROJECTS\\\\Bikestores\\\\project.frontend\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.setting = [];\n    this.settingLoaded = false;\n    this.isLoading = false; //chiamo la funzionalità per il recupero dei Setting  e ne eseguo lo store nella variabile preposta\n\n    this.isLoading = true; //this.LoadSetting()\n    //  .subscribe(\n    //    (response) => {                           //next() callback\n    //      this.setting = response;\n    //      this.isLoading = false;\n    //      this.settingLoaded = true;\n    //    },\n    //    (error) => {                              //error() callback\n    //      console.error('Request failed with error')\n    //      this.isLoading = false;\n    //      this.settingLoaded = false;\n    //    })\n  }\n  /**funzione di recupero Setting  */\n  //public LoadSetting() : Observable<ISetting[]> {\n  //  //return this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\")\n  //  this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\").subscribe((res) => this.setSetting(res));\n  //}\n\n\n  LoadConfiguration() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.get(\"https://localhost:7124/api/Setting\").toPromise();\n    })();\n  }\n\n  setSetting(response) {\n    this.setting = response;\n    this.isLoading = false;\n    this.settingLoaded = true;\n  }\n  /**\r\n   * Recupero il valore associato ad una chiave\r\n   * @param keyToSearch Chiave da ricercare\r\n   * @return string | null\r\n   */\n\n\n  GetValue(keyToSearch) {\n    if (this.setting != null && this.setting.length > 0) {\n      var item = this.setting.filter(el => {\n        return el.settingKey === keyToSearch;\n      });\n      return item.length > 0 ? item[0].settingValue : null;\n    }\n\n    return null;\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/TEST-PROJECTS/Bikestores/project.frontend/ClientApp/src/app/services/config.service.ts"],"names":["i0","i1","ConfigService","constructor","http","setting","settingLoaded","isLoading","LoadConfiguration","get","toPromise","setSetting","response","GetValue","keyToSearch","length","item","filter","el","settingKey","settingValue","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,SAAL,GAAiB,KAAjB,CAJc,CAKd;;AACA,SAAKA,SAAL,GAAiB,IAAjB,CANc,CAOd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACD;AACA;AACA;AACA;AACA;;;AACMC,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,aAAO,KAAI,CAACJ,IAAL,CAAUK,GAAV,CAAc,oCAAd,EAAoDC,SAApD,EAAP;AADsB;AAEzB;;AACDC,EAAAA,UAAU,CAACC,QAAD,EAAW;AACjB,SAAKP,OAAL,GAAeO,QAAf;AACA,SAAKL,SAAL,GAAiB,KAAjB;AACA,SAAKD,aAAL,GAAqB,IAArB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIO,EAAAA,QAAQ,CAACC,WAAD,EAAc;AAClB,QAAI,KAAKT,OAAL,IAAgB,IAAhB,IAAwB,KAAKA,OAAL,CAAaU,MAAb,GAAsB,CAAlD,EAAqD;AACjD,UAAIC,IAAI,GAAG,KAAKX,OAAL,CAAaY,MAAb,CAAqBC,EAAD,IAAQ;AAAE,eAAOA,EAAE,CAACC,UAAH,KAAkBL,WAAzB;AAAuC,OAArE,CAAX;AACA,aAAQE,IAAI,CAACD,MAAL,GAAc,CAAf,GAAoBC,IAAI,CAAC,CAAD,CAAJ,CAAQI,YAA5B,GAA2C,IAAlD;AACH;;AACD,WAAO,IAAP;AACH;;AA7CsB;;AA+C3BlB,aAAa,CAACmB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIrB,aAAV,EAAyBF,EAAE,CAACwB,QAAH,CAAYvB,EAAE,CAACwB,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAvB,aAAa,CAACwB,KAAd,GAAsB,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE1B,aAAT;AAAwB2B,EAAAA,OAAO,EAAE3B,aAAa,CAACmB,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.setting = [];\r\n        this.settingLoaded = false;\r\n        this.isLoading = false;\r\n        //chiamo la funzionalità per il recupero dei Setting  e ne eseguo lo store nella variabile preposta\r\n        this.isLoading = true;\r\n        //this.LoadSetting()\r\n        //  .subscribe(\r\n        //    (response) => {                           //next() callback\r\n        //      this.setting = response;\r\n        //      this.isLoading = false;\r\n        //      this.settingLoaded = true;\r\n        //    },\r\n        //    (error) => {                              //error() callback\r\n        //      console.error('Request failed with error')\r\n        //      this.isLoading = false;\r\n        //      this.settingLoaded = false;\r\n        //    })\r\n    }\r\n    /**funzione di recupero Setting  */\r\n    //public LoadSetting() : Observable<ISetting[]> {\r\n    //  //return this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\")\r\n    //  this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\").subscribe((res) => this.setSetting(res));\r\n    //}\r\n    async LoadConfiguration() {\r\n        return this.http.get(\"https://localhost:7124/api/Setting\").toPromise();\r\n    }\r\n    setSetting(response) {\r\n        this.setting = response;\r\n        this.isLoading = false;\r\n        this.settingLoaded = true;\r\n    }\r\n    /**\r\n     * Recupero il valore associato ad una chiave\r\n     * @param keyToSearch Chiave da ricercare\r\n     * @return string | null\r\n     */\r\n    GetValue(keyToSearch) {\r\n        if (this.setting != null && this.setting.length > 0) {\r\n            var item = this.setting.filter((el) => { return el.settingKey === keyToSearch; });\r\n            return (item.length > 0) ? item[0].settingValue : null;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}