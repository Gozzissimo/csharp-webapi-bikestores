{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.setting = [];\n    this.settingLoaded = false;\n    this.settingIsLoading = false;\n    this.settingError = false;\n  }\n  /**\r\n   * Faccio una chiamata all'API con promise, il risultato lo salvo in setting\r\n   * @return ISetting[]\r\n   */\n\n\n  loadSettings() {\n    this.settingIsLoading = true;\n    return this.http.get(\"https://localhost:7124/api/Setting\").toPromise().then(response => {\n      this.setting = response;\n      this.settingLoaded = true;\n      this.settingIsLoading = false;\n    }, () => {\n      this.settingIsLoading = false;\n      this.settingError = true;\n    });\n  } //ALTERNATIVE METHOD\n  //public async load() {\n  //  let response = await this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\");\n  //  this.setting = await response.toPromise();\n  //  this.settingLoaded = true;\n  //  this.isLoading = false;\n  //}\n\n  /**\r\n   * Recupero il valore associato ad una chiave\r\n   * @param keyToSearch Chiave da ricercare\r\n   * @return string | null\r\n   */\n\n\n  GetValue(keyToSearch) {\n    if (this.setting != null && this.setting.length > 0) {\n      var item = this.setting.filter(el => {\n        return el.settingKey === keyToSearch;\n      });\n      return item.length > 0 ? item[0].settingValue : null;\n    }\n\n    return null;\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/TEST-PROJECTS/Bikestores/project.frontend/ClientApp/src/app/services/config.service.ts"],"names":["i0","i1","ConfigService","constructor","http","setting","settingLoaded","settingIsLoading","settingError","loadSettings","get","toPromise","then","response","GetValue","keyToSearch","length","item","filter","el","settingKey","settingValue","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,YAAY,GAAG;AACX,SAAKF,gBAAL,GAAwB,IAAxB;AACA,WAAO,KAAKH,IAAL,CAAUM,GAAV,CAAc,oCAAd,EACFC,SADE,GAEFC,IAFE,CAEIC,QAAD,IAAc;AACpB,WAAKR,OAAL,GAAeQ,QAAf;AACA,WAAKP,aAAL,GAAqB,IAArB;AACA,WAAKC,gBAAL,GAAwB,KAAxB;AACH,KANM,EAMJ,MAAM;AACL,WAAKA,gBAAL,GAAwB,KAAxB;AACA,WAAKC,YAAL,GAAoB,IAApB;AACH,KATM,CAAP;AAUH,GAxBsB,CAyBvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;;;AACIM,EAAAA,QAAQ,CAACC,WAAD,EAAc;AAClB,QAAI,KAAKV,OAAL,IAAgB,IAAhB,IAAwB,KAAKA,OAAL,CAAaW,MAAb,GAAsB,CAAlD,EAAqD;AACjD,UAAIC,IAAI,GAAG,KAAKZ,OAAL,CAAaa,MAAb,CAAqBC,EAAD,IAAQ;AAAE,eAAOA,EAAE,CAACC,UAAH,KAAkBL,WAAzB;AAAuC,OAArE,CAAX;AACA,aAAQE,IAAI,CAACD,MAAL,GAAc,CAAf,GAAoBC,IAAI,CAAC,CAAD,CAAJ,CAAQI,YAA5B,GAA2C,IAAlD;AACH;;AACD,WAAO,IAAP;AACH;;AA3CsB;;AA6C3BnB,aAAa,CAACoB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAItB,aAAV,EAAyBF,EAAE,CAACyB,QAAH,CAAYxB,EAAE,CAACyB,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACAxB,aAAa,CAACyB,KAAd,GAAsB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,aAAT;AAAwB4B,EAAAA,OAAO,EAAE5B,aAAa,CAACoB,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.setting = [];\r\n        this.settingLoaded = false;\r\n        this.settingIsLoading = false;\r\n        this.settingError = false;\r\n    }\r\n    /**\r\n     * Faccio una chiamata all'API con promise, il risultato lo salvo in setting\r\n     * @return ISetting[]\r\n     */\r\n    loadSettings() {\r\n        this.settingIsLoading = true;\r\n        return this.http.get(\"https://localhost:7124/api/Setting\")\r\n            .toPromise()\r\n            .then((response) => {\r\n            this.setting = response;\r\n            this.settingLoaded = true;\r\n            this.settingIsLoading = false;\r\n        }, () => {\r\n            this.settingIsLoading = false;\r\n            this.settingError = true;\r\n        });\r\n    }\r\n    //ALTERNATIVE METHOD\r\n    //public async load() {\r\n    //  let response = await this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\");\r\n    //  this.setting = await response.toPromise();\r\n    //  this.settingLoaded = true;\r\n    //  this.isLoading = false;\r\n    //}\r\n    /**\r\n     * Recupero il valore associato ad una chiave\r\n     * @param keyToSearch Chiave da ricercare\r\n     * @return string | null\r\n     */\r\n    GetValue(keyToSearch) {\r\n        if (this.setting != null && this.setting.length > 0) {\r\n            var item = this.setting.filter((el) => { return el.settingKey === keyToSearch; });\r\n            return (item.length > 0) ? item[0].settingValue : null;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}