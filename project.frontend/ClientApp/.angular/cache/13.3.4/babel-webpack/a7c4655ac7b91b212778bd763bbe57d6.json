{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n    this.setting = [];\n    this.settingLoaded = false;\n    this.isLoading = false; //chiamo la funzionalità per il recupero dei Setting  e ne eseguo lo store nella variabile setting\n\n    this.load();\n  }\n\n  load() {\n    this.isLoading = true;\n    return this.http.get(\"https://localhost:7124/api/Setting\").toPromise().then(response => {\n      this.setting = response;\n      this.settingLoaded = true;\n      this.isLoading = false;\n    }, error => {\n      console.log(error);\n      this.isLoading = false;\n      this.settingLoaded = false;\n    });\n  } //async load() {\n  //  let response = await this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\");\n  //  this.setting = await response.toPromise();\n  //  this.settingLoaded = true;\n  //  this.isLoading = false;\n  //}\n  //public ReloadConf() {\n  //  console.log(\"ReloadConf Start\")\n  //  this.isLoading = true;\n  //  this.LoadSetting()\n  //    .subscribe(\n  //      (response) => {                           //next() callback\n  //        this.setting = response;\n  //        this.isLoading = false;\n  //        this.settingLoaded = true;\n  //        console.log(\"ReloadConf END\")\n  //      },\n  //      (error) => {                              //error() callback\n  //        console.error('Request failed with error')\n  //        this.isLoading = false;\n  //        this.settingLoaded = false;\n  //      })\n  //}\n\n  /**\r\n   * Recupero il valore associato ad una chiave\r\n   * @param keyToSearch Chiave da ricercare\r\n   * @return string | null\r\n   */\n\n\n  GetValue(keyToSearch) {\n    if (this.setting != null && this.setting.length > 0) {\n      var item = this.setting.filter(el => {\n        return el.settingKey === keyToSearch;\n      });\n      return item.length > 0 ? item[0].settingValue : null;\n    }\n\n    return null;\n  }\n\n}\n\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/TEST-PROJECTS/Bikestores/project.frontend/ClientApp/src/app/services/config.service.ts"],"names":["i0","i1","ConfigService","constructor","http","setting","settingLoaded","isLoading","load","get","toPromise","then","response","error","console","log","GetValue","keyToSearch","length","item","filter","el","settingKey","settingValue","ɵfac","ConfigService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,SAAL,GAAiB,KAAjB,CAJc,CAKd;;AACA,SAAKC,IAAL;AACH;;AACDA,EAAAA,IAAI,GAAG;AACH,SAAKD,SAAL,GAAiB,IAAjB;AACA,WAAO,KAAKH,IAAL,CAAUK,GAAV,CAAc,oCAAd,EACFC,SADE,GAEFC,IAFE,CAEIC,QAAD,IAAc;AACpB,WAAKP,OAAL,GAAeO,QAAf;AACA,WAAKN,aAAL,GAAqB,IAArB;AACA,WAAKC,SAAL,GAAiB,KAAjB;AACH,KANM,EAMHM,KAAD,IAAW;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAKN,SAAL,GAAiB,KAAjB;AACA,WAAKD,aAAL,GAAqB,KAArB;AACH,KAVM,CAAP;AAWH,GAtBsB,CAuBvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;;;AACIU,EAAAA,QAAQ,CAACC,WAAD,EAAc;AAClB,QAAI,KAAKZ,OAAL,IAAgB,IAAhB,IAAwB,KAAKA,OAAL,CAAaa,MAAb,GAAsB,CAAlD,EAAqD;AACjD,UAAIC,IAAI,GAAG,KAAKd,OAAL,CAAae,MAAb,CAAqBC,EAAD,IAAQ;AAAE,eAAOA,EAAE,CAACC,UAAH,KAAkBL,WAAzB;AAAuC,OAArE,CAAX;AACA,aAAQE,IAAI,CAACD,MAAL,GAAc,CAAf,GAAoBC,IAAI,CAAC,CAAD,CAAJ,CAAQI,YAA5B,GAA2C,IAAlD;AACH;;AACD,WAAO,IAAP;AACH;;AAzDsB;;AA2D3BrB,aAAa,CAACsB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAIxB,aAAV,EAAyBF,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,UAAf,CAAzB,CAAP;AAA8D,CAAvH;;AACA1B,aAAa,CAAC2B,KAAd,GAAsB,aAAc7B,EAAE,CAAC8B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,aAAT;AAAwB8B,EAAAA,OAAO,EAAE9B,aAAa,CAACsB,IAA/C;AAAqDS,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ConfigService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.setting = [];\r\n        this.settingLoaded = false;\r\n        this.isLoading = false;\r\n        //chiamo la funzionalità per il recupero dei Setting  e ne eseguo lo store nella variabile setting\r\n        this.load();\r\n    }\r\n    load() {\r\n        this.isLoading = true;\r\n        return this.http.get(\"https://localhost:7124/api/Setting\")\r\n            .toPromise()\r\n            .then((response) => {\r\n            this.setting = response;\r\n            this.settingLoaded = true;\r\n            this.isLoading = false;\r\n        }, (error) => {\r\n            console.log(error);\r\n            this.isLoading = false;\r\n            this.settingLoaded = false;\r\n        });\r\n    }\r\n    //async load() {\r\n    //  let response = await this.http.get<ISetting[]>(\"https://localhost:7124/api/Setting\");\r\n    //  this.setting = await response.toPromise();\r\n    //  this.settingLoaded = true;\r\n    //  this.isLoading = false;\r\n    //}\r\n    //public ReloadConf() {\r\n    //  console.log(\"ReloadConf Start\")\r\n    //  this.isLoading = true;\r\n    //  this.LoadSetting()\r\n    //    .subscribe(\r\n    //      (response) => {                           //next() callback\r\n    //        this.setting = response;\r\n    //        this.isLoading = false;\r\n    //        this.settingLoaded = true;\r\n    //        console.log(\"ReloadConf END\")\r\n    //      },\r\n    //      (error) => {                              //error() callback\r\n    //        console.error('Request failed with error')\r\n    //        this.isLoading = false;\r\n    //        this.settingLoaded = false;\r\n    //      })\r\n    //}\r\n    /**\r\n     * Recupero il valore associato ad una chiave\r\n     * @param keyToSearch Chiave da ricercare\r\n     * @return string | null\r\n     */\r\n    GetValue(keyToSearch) {\r\n        if (this.setting != null && this.setting.length > 0) {\r\n            var item = this.setting.filter((el) => { return el.settingKey === keyToSearch; });\r\n            return (item.length > 0) ? item[0].settingValue : null;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nConfigService.ɵfac = function ConfigService_Factory(t) { return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient)); };\r\nConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigService, factory: ConfigService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}